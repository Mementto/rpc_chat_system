// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RPCHeader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RPCHeader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RPCHeader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RPCHeader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RPCHeader_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RPCHeader_2eproto;
namespace mprpc {
class AddFriendsRequest;
struct AddFriendsRequestDefaultTypeInternal;
extern AddFriendsRequestDefaultTypeInternal _AddFriendsRequest_default_instance_;
class AddFriendsResponse;
struct AddFriendsResponseDefaultTypeInternal;
extern AddFriendsResponseDefaultTypeInternal _AddFriendsResponse_default_instance_;
class AddGroupRequest;
struct AddGroupRequestDefaultTypeInternal;
extern AddGroupRequestDefaultTypeInternal _AddGroupRequest_default_instance_;
class AddGroupResponse;
struct AddGroupResponseDefaultTypeInternal;
extern AddGroupResponseDefaultTypeInternal _AddGroupResponse_default_instance_;
class CreateGroupRequest;
struct CreateGroupRequestDefaultTypeInternal;
extern CreateGroupRequestDefaultTypeInternal _CreateGroupRequest_default_instance_;
class CreateGroupResponse;
struct CreateGroupResponseDefaultTypeInternal;
extern CreateGroupResponseDefaultTypeInternal _CreateGroupResponse_default_instance_;
class FriendInfo;
struct FriendInfoDefaultTypeInternal;
extern FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
class GroupChatRequest;
struct GroupChatRequestDefaultTypeInternal;
extern GroupChatRequestDefaultTypeInternal _GroupChatRequest_default_instance_;
class GroupChatResponse;
struct GroupChatResponseDefaultTypeInternal;
extern GroupChatResponseDefaultTypeInternal _GroupChatResponse_default_instance_;
class GroupInfo;
struct GroupInfoDefaultTypeInternal;
extern GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
class GroupMember;
struct GroupMemberDefaultTypeInternal;
extern GroupMemberDefaultTypeInternal _GroupMember_default_instance_;
class QueryAllFriendsRequest;
struct QueryAllFriendsRequestDefaultTypeInternal;
extern QueryAllFriendsRequestDefaultTypeInternal _QueryAllFriendsRequest_default_instance_;
class QueryAllFriendsResponse;
struct QueryAllFriendsResponseDefaultTypeInternal;
extern QueryAllFriendsResponseDefaultTypeInternal _QueryAllFriendsResponse_default_instance_;
class QueryAllGroupsRequest;
struct QueryAllGroupsRequestDefaultTypeInternal;
extern QueryAllGroupsRequestDefaultTypeInternal _QueryAllGroupsRequest_default_instance_;
class QueryAllGroupsResponse;
struct QueryAllGroupsResponseDefaultTypeInternal;
extern QueryAllGroupsResponseDefaultTypeInternal _QueryAllGroupsResponse_default_instance_;
class ResultCode;
struct ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
}  // namespace mprpc
PROTOBUF_NAMESPACE_OPEN
template<> ::mprpc::AddFriendsRequest* Arena::CreateMaybeMessage<::mprpc::AddFriendsRequest>(Arena*);
template<> ::mprpc::AddFriendsResponse* Arena::CreateMaybeMessage<::mprpc::AddFriendsResponse>(Arena*);
template<> ::mprpc::AddGroupRequest* Arena::CreateMaybeMessage<::mprpc::AddGroupRequest>(Arena*);
template<> ::mprpc::AddGroupResponse* Arena::CreateMaybeMessage<::mprpc::AddGroupResponse>(Arena*);
template<> ::mprpc::CreateGroupRequest* Arena::CreateMaybeMessage<::mprpc::CreateGroupRequest>(Arena*);
template<> ::mprpc::CreateGroupResponse* Arena::CreateMaybeMessage<::mprpc::CreateGroupResponse>(Arena*);
template<> ::mprpc::FriendInfo* Arena::CreateMaybeMessage<::mprpc::FriendInfo>(Arena*);
template<> ::mprpc::GroupChatRequest* Arena::CreateMaybeMessage<::mprpc::GroupChatRequest>(Arena*);
template<> ::mprpc::GroupChatResponse* Arena::CreateMaybeMessage<::mprpc::GroupChatResponse>(Arena*);
template<> ::mprpc::GroupInfo* Arena::CreateMaybeMessage<::mprpc::GroupInfo>(Arena*);
template<> ::mprpc::GroupMember* Arena::CreateMaybeMessage<::mprpc::GroupMember>(Arena*);
template<> ::mprpc::QueryAllFriendsRequest* Arena::CreateMaybeMessage<::mprpc::QueryAllFriendsRequest>(Arena*);
template<> ::mprpc::QueryAllFriendsResponse* Arena::CreateMaybeMessage<::mprpc::QueryAllFriendsResponse>(Arena*);
template<> ::mprpc::QueryAllGroupsRequest* Arena::CreateMaybeMessage<::mprpc::QueryAllGroupsRequest>(Arena*);
template<> ::mprpc::QueryAllGroupsResponse* Arena::CreateMaybeMessage<::mprpc::QueryAllGroupsResponse>(Arena*);
template<> ::mprpc::ResultCode* Arena::CreateMaybeMessage<::mprpc::ResultCode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mprpc {

// ===================================================================

class ResultCode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.ResultCode) */ {
 public:
  inline ResultCode() : ResultCode(nullptr) {}
  ~ResultCode() override;
  explicit PROTOBUF_CONSTEXPR ResultCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultCode(const ResultCode& from);
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultCode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultCode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResultCode& from) {
    ResultCode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.ResultCode";
  }
  protected:
  explicit ResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // bytes errMsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mprpc.ResultCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class FriendInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.FriendInfo) */ {
 public:
  inline FriendInfo() : FriendInfo(nullptr) {}
  ~FriendInfo() override;
  explicit PROTOBUF_CONSTEXPR FriendInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendInfo(const FriendInfo& from);
  FriendInfo(FriendInfo&& from) noexcept
    : FriendInfo() {
    *this = ::std::move(from);
  }

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInfo& operator=(FriendInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInfo*>(
               &_FriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FriendInfo& a, FriendInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendInfo& from) {
    FriendInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.FriendInfo";
  }
  protected:
  explicit FriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kStateFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes state = 3;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // uint32 userId = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mprpc.FriendInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    uint32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class GroupMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.GroupMember) */ {
 public:
  inline GroupMember() : GroupMember(nullptr) {}
  ~GroupMember() override;
  explicit PROTOBUF_CONSTEXPR GroupMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMember(const GroupMember& from);
  GroupMember(GroupMember&& from) noexcept
    : GroupMember() {
    *this = ::std::move(from);
  }

  inline GroupMember& operator=(const GroupMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMember& operator=(GroupMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMember* internal_default_instance() {
    return reinterpret_cast<const GroupMember*>(
               &_GroupMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GroupMember& a, GroupMember& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupMember& from) {
    GroupMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.GroupMember";
  }
  protected:
  explicit GroupMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kStateFieldNumber = 3,
    kRoleFieldNumber = 4,
    kUserIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes state = 3;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // bytes role = 4;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // uint32 userId = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mprpc.GroupMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    uint32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class GroupInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.GroupInfo) */ {
 public:
  inline GroupInfo() : GroupInfo(nullptr) {}
  ~GroupInfo() override;
  explicit PROTOBUF_CONSTEXPR GroupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInfo(const GroupInfo& from);
  GroupInfo(GroupInfo&& from) noexcept
    : GroupInfo() {
    *this = ::std::move(from);
  }

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfo& operator=(GroupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInfo* internal_default_instance() {
    return reinterpret_cast<const GroupInfo*>(
               &_GroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupInfo& a, GroupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupInfo& from) {
    GroupInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.GroupInfo";
  }
  protected:
  explicit GroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberFieldNumber = 4,
    kGroupNameFieldNumber = 2,
    kGroupDescFieldNumber = 3,
    kGroupIdFieldNumber = 1,
  };
  // repeated .mprpc.GroupMember member = 4;
  int member_size() const;
  private:
  int _internal_member_size() const;
  public:
  void clear_member();
  ::mprpc::GroupMember* mutable_member(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::GroupMember >*
      mutable_member();
  private:
  const ::mprpc::GroupMember& _internal_member(int index) const;
  ::mprpc::GroupMember* _internal_add_member();
  public:
  const ::mprpc::GroupMember& member(int index) const;
  ::mprpc::GroupMember* add_member();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::GroupMember >&
      member() const;

  // bytes groupName = 2;
  void clear_groupname();
  const std::string& groupname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupname();
  PROTOBUF_NODISCARD std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // bytes groupDesc = 3;
  void clear_groupdesc();
  const std::string& groupdesc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupdesc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupdesc();
  PROTOBUF_NODISCARD std::string* release_groupdesc();
  void set_allocated_groupdesc(std::string* groupdesc);
  private:
  const std::string& _internal_groupdesc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupdesc(const std::string& value);
  std::string* _internal_mutable_groupdesc();
  public:

  // uint32 groupId = 1;
  void clear_groupid();
  uint32_t groupid() const;
  void set_groupid(uint32_t value);
  private:
  uint32_t _internal_groupid() const;
  void _internal_set_groupid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mprpc.GroupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::GroupMember > member_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupdesc_;
    uint32_t groupid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class AddFriendsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.AddFriendsRequest) */ {
 public:
  inline AddFriendsRequest() : AddFriendsRequest(nullptr) {}
  ~AddFriendsRequest() override;
  explicit PROTOBUF_CONSTEXPR AddFriendsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendsRequest(const AddFriendsRequest& from);
  AddFriendsRequest(AddFriendsRequest&& from) noexcept
    : AddFriendsRequest() {
    *this = ::std::move(from);
  }

  inline AddFriendsRequest& operator=(const AddFriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendsRequest& operator=(AddFriendsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendsRequest* internal_default_instance() {
    return reinterpret_cast<const AddFriendsRequest*>(
               &_AddFriendsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddFriendsRequest& a, AddFriendsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFriendsRequest& from) {
    AddFriendsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.AddFriendsRequest";
  }
  protected:
  explicit AddFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
  };
  // uint32 userId = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // uint32 friendId = 2;
  void clear_friendid();
  uint32_t friendid() const;
  void set_friendid(uint32_t value);
  private:
  uint32_t _internal_friendid() const;
  void _internal_set_friendid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mprpc.AddFriendsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t userid_;
    uint32_t friendid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class AddFriendsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.AddFriendsResponse) */ {
 public:
  inline AddFriendsResponse() : AddFriendsResponse(nullptr) {}
  ~AddFriendsResponse() override;
  explicit PROTOBUF_CONSTEXPR AddFriendsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendsResponse(const AddFriendsResponse& from);
  AddFriendsResponse(AddFriendsResponse&& from) noexcept
    : AddFriendsResponse() {
    *this = ::std::move(from);
  }

  inline AddFriendsResponse& operator=(const AddFriendsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendsResponse& operator=(AddFriendsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendsResponse* internal_default_instance() {
    return reinterpret_cast<const AddFriendsResponse*>(
               &_AddFriendsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddFriendsResponse& a, AddFriendsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFriendsResponse& from) {
    AddFriendsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.AddFriendsResponse";
  }
  protected:
  explicit AddFriendsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .mprpc.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::mprpc::ResultCode& result() const;
  PROTOBUF_NODISCARD ::mprpc::ResultCode* release_result();
  ::mprpc::ResultCode* mutable_result();
  void set_allocated_result(::mprpc::ResultCode* result);
  private:
  const ::mprpc::ResultCode& _internal_result() const;
  ::mprpc::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::mprpc::ResultCode* result);
  ::mprpc::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:mprpc.AddFriendsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mprpc::ResultCode* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class QueryAllFriendsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.QueryAllFriendsRequest) */ {
 public:
  inline QueryAllFriendsRequest() : QueryAllFriendsRequest(nullptr) {}
  ~QueryAllFriendsRequest() override;
  explicit PROTOBUF_CONSTEXPR QueryAllFriendsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllFriendsRequest(const QueryAllFriendsRequest& from);
  QueryAllFriendsRequest(QueryAllFriendsRequest&& from) noexcept
    : QueryAllFriendsRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllFriendsRequest& operator=(const QueryAllFriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllFriendsRequest& operator=(QueryAllFriendsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllFriendsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllFriendsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllFriendsRequest*>(
               &_QueryAllFriendsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryAllFriendsRequest& a, QueryAllFriendsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllFriendsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllFriendsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllFriendsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllFriendsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllFriendsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllFriendsRequest& from) {
    QueryAllFriendsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllFriendsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.QueryAllFriendsRequest";
  }
  protected:
  explicit QueryAllFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // uint32 userId = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mprpc.QueryAllFriendsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class QueryAllFriendsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.QueryAllFriendsResponse) */ {
 public:
  inline QueryAllFriendsResponse() : QueryAllFriendsResponse(nullptr) {}
  ~QueryAllFriendsResponse() override;
  explicit PROTOBUF_CONSTEXPR QueryAllFriendsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllFriendsResponse(const QueryAllFriendsResponse& from);
  QueryAllFriendsResponse(QueryAllFriendsResponse&& from) noexcept
    : QueryAllFriendsResponse() {
    *this = ::std::move(from);
  }

  inline QueryAllFriendsResponse& operator=(const QueryAllFriendsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllFriendsResponse& operator=(QueryAllFriendsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllFriendsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllFriendsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAllFriendsResponse*>(
               &_QueryAllFriendsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryAllFriendsResponse& a, QueryAllFriendsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllFriendsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllFriendsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllFriendsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllFriendsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllFriendsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllFriendsResponse& from) {
    QueryAllFriendsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllFriendsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.QueryAllFriendsResponse";
  }
  protected:
  explicit QueryAllFriendsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .mprpc.FriendInfo friends = 2;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::mprpc::FriendInfo* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::FriendInfo >*
      mutable_friends();
  private:
  const ::mprpc::FriendInfo& _internal_friends(int index) const;
  ::mprpc::FriendInfo* _internal_add_friends();
  public:
  const ::mprpc::FriendInfo& friends(int index) const;
  ::mprpc::FriendInfo* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::FriendInfo >&
      friends() const;

  // .mprpc.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::mprpc::ResultCode& result() const;
  PROTOBUF_NODISCARD ::mprpc::ResultCode* release_result();
  ::mprpc::ResultCode* mutable_result();
  void set_allocated_result(::mprpc::ResultCode* result);
  private:
  const ::mprpc::ResultCode& _internal_result() const;
  ::mprpc::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::mprpc::ResultCode* result);
  ::mprpc::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:mprpc.QueryAllFriendsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::FriendInfo > friends_;
    ::mprpc::ResultCode* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.CreateGroupRequest) */ {
 public:
  inline CreateGroupRequest() : CreateGroupRequest(nullptr) {}
  ~CreateGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateGroupRequest(const CreateGroupRequest& from);
  CreateGroupRequest(CreateGroupRequest&& from) noexcept
    : CreateGroupRequest() {
    *this = ::std::move(from);
  }

  inline CreateGroupRequest& operator=(const CreateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupRequest& operator=(CreateGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateGroupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRequest*>(
               &_CreateGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateGroupRequest& a, CreateGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateGroupRequest& from) {
    CreateGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.CreateGroupRequest";
  }
  protected:
  explicit CreateGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes desc = 3;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // uint32 userId = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mprpc.CreateGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    uint32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.CreateGroupResponse) */ {
 public:
  inline CreateGroupResponse() : CreateGroupResponse(nullptr) {}
  ~CreateGroupResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateGroupResponse(const CreateGroupResponse& from);
  CreateGroupResponse(CreateGroupResponse&& from) noexcept
    : CreateGroupResponse() {
    *this = ::std::move(from);
  }

  inline CreateGroupResponse& operator=(const CreateGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupResponse& operator=(CreateGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateGroupResponse* internal_default_instance() {
    return reinterpret_cast<const CreateGroupResponse*>(
               &_CreateGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateGroupResponse& a, CreateGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateGroupResponse& from) {
    CreateGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.CreateGroupResponse";
  }
  protected:
  explicit CreateGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .mprpc.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::mprpc::ResultCode& result() const;
  PROTOBUF_NODISCARD ::mprpc::ResultCode* release_result();
  ::mprpc::ResultCode* mutable_result();
  void set_allocated_result(::mprpc::ResultCode* result);
  private:
  const ::mprpc::ResultCode& _internal_result() const;
  ::mprpc::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::mprpc::ResultCode* result);
  ::mprpc::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:mprpc.CreateGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mprpc::ResultCode* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class AddGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.AddGroupRequest) */ {
 public:
  inline AddGroupRequest() : AddGroupRequest(nullptr) {}
  ~AddGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR AddGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddGroupRequest(const AddGroupRequest& from);
  AddGroupRequest(AddGroupRequest&& from) noexcept
    : AddGroupRequest() {
    *this = ::std::move(from);
  }

  inline AddGroupRequest& operator=(const AddGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroupRequest& operator=(AddGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddGroupRequest* internal_default_instance() {
    return reinterpret_cast<const AddGroupRequest*>(
               &_AddGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AddGroupRequest& a, AddGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddGroupRequest& from) {
    AddGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.AddGroupRequest";
  }
  protected:
  explicit AddGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // uint32 userId = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // uint32 groupId = 2;
  void clear_groupid();
  uint32_t groupid() const;
  void set_groupid(uint32_t value);
  private:
  uint32_t _internal_groupid() const;
  void _internal_set_groupid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mprpc.AddGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t userid_;
    uint32_t groupid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class AddGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.AddGroupResponse) */ {
 public:
  inline AddGroupResponse() : AddGroupResponse(nullptr) {}
  ~AddGroupResponse() override;
  explicit PROTOBUF_CONSTEXPR AddGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddGroupResponse(const AddGroupResponse& from);
  AddGroupResponse(AddGroupResponse&& from) noexcept
    : AddGroupResponse() {
    *this = ::std::move(from);
  }

  inline AddGroupResponse& operator=(const AddGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroupResponse& operator=(AddGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddGroupResponse* internal_default_instance() {
    return reinterpret_cast<const AddGroupResponse*>(
               &_AddGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AddGroupResponse& a, AddGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddGroupResponse& from) {
    AddGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.AddGroupResponse";
  }
  protected:
  explicit AddGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .mprpc.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::mprpc::ResultCode& result() const;
  PROTOBUF_NODISCARD ::mprpc::ResultCode* release_result();
  ::mprpc::ResultCode* mutable_result();
  void set_allocated_result(::mprpc::ResultCode* result);
  private:
  const ::mprpc::ResultCode& _internal_result() const;
  ::mprpc::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::mprpc::ResultCode* result);
  ::mprpc::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:mprpc.AddGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::mprpc::ResultCode* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class QueryAllGroupsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.QueryAllGroupsRequest) */ {
 public:
  inline QueryAllGroupsRequest() : QueryAllGroupsRequest(nullptr) {}
  ~QueryAllGroupsRequest() override;
  explicit PROTOBUF_CONSTEXPR QueryAllGroupsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllGroupsRequest(const QueryAllGroupsRequest& from);
  QueryAllGroupsRequest(QueryAllGroupsRequest&& from) noexcept
    : QueryAllGroupsRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllGroupsRequest& operator=(const QueryAllGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllGroupsRequest& operator=(QueryAllGroupsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllGroupsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllGroupsRequest*>(
               &_QueryAllGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryAllGroupsRequest& a, QueryAllGroupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllGroupsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllGroupsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllGroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllGroupsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllGroupsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllGroupsRequest& from) {
    QueryAllGroupsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllGroupsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.QueryAllGroupsRequest";
  }
  protected:
  explicit QueryAllGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // uint32 userId = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mprpc.QueryAllGroupsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class QueryAllGroupsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.QueryAllGroupsResponse) */ {
 public:
  inline QueryAllGroupsResponse() : QueryAllGroupsResponse(nullptr) {}
  ~QueryAllGroupsResponse() override;
  explicit PROTOBUF_CONSTEXPR QueryAllGroupsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllGroupsResponse(const QueryAllGroupsResponse& from);
  QueryAllGroupsResponse(QueryAllGroupsResponse&& from) noexcept
    : QueryAllGroupsResponse() {
    *this = ::std::move(from);
  }

  inline QueryAllGroupsResponse& operator=(const QueryAllGroupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllGroupsResponse& operator=(QueryAllGroupsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllGroupsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllGroupsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAllGroupsResponse*>(
               &_QueryAllGroupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryAllGroupsResponse& a, QueryAllGroupsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllGroupsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllGroupsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllGroupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllGroupsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllGroupsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllGroupsResponse& from) {
    QueryAllGroupsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllGroupsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.QueryAllGroupsResponse";
  }
  protected:
  explicit QueryAllGroupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .mprpc.GroupInfo groups = 2;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::mprpc::GroupInfo* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::GroupInfo >*
      mutable_groups();
  private:
  const ::mprpc::GroupInfo& _internal_groups(int index) const;
  ::mprpc::GroupInfo* _internal_add_groups();
  public:
  const ::mprpc::GroupInfo& groups(int index) const;
  ::mprpc::GroupInfo* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::GroupInfo >&
      groups() const;

  // .mprpc.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::mprpc::ResultCode& result() const;
  PROTOBUF_NODISCARD ::mprpc::ResultCode* release_result();
  ::mprpc::ResultCode* mutable_result();
  void set_allocated_result(::mprpc::ResultCode* result);
  private:
  const ::mprpc::ResultCode& _internal_result() const;
  ::mprpc::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::mprpc::ResultCode* result);
  ::mprpc::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:mprpc.QueryAllGroupsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::GroupInfo > groups_;
    ::mprpc::ResultCode* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class GroupChatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.GroupChatRequest) */ {
 public:
  inline GroupChatRequest() : GroupChatRequest(nullptr) {}
  ~GroupChatRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupChatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupChatRequest(const GroupChatRequest& from);
  GroupChatRequest(GroupChatRequest&& from) noexcept
    : GroupChatRequest() {
    *this = ::std::move(from);
  }

  inline GroupChatRequest& operator=(const GroupChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChatRequest& operator=(GroupChatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupChatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupChatRequest* internal_default_instance() {
    return reinterpret_cast<const GroupChatRequest*>(
               &_GroupChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GroupChatRequest& a, GroupChatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupChatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupChatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupChatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupChatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupChatRequest& from) {
    GroupChatRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupChatRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.GroupChatRequest";
  }
  protected:
  explicit GroupChatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // uint32 userId = 1;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // uint32 groupId = 2;
  void clear_groupid();
  uint32_t groupid() const;
  void set_groupid(uint32_t value);
  private:
  uint32_t _internal_groupid() const;
  void _internal_set_groupid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mprpc.GroupChatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t userid_;
    uint32_t groupid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// -------------------------------------------------------------------

class GroupChatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mprpc.GroupChatResponse) */ {
 public:
  inline GroupChatResponse() : GroupChatResponse(nullptr) {}
  ~GroupChatResponse() override;
  explicit PROTOBUF_CONSTEXPR GroupChatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupChatResponse(const GroupChatResponse& from);
  GroupChatResponse(GroupChatResponse&& from) noexcept
    : GroupChatResponse() {
    *this = ::std::move(from);
  }

  inline GroupChatResponse& operator=(const GroupChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChatResponse& operator=(GroupChatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupChatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupChatResponse* internal_default_instance() {
    return reinterpret_cast<const GroupChatResponse*>(
               &_GroupChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GroupChatResponse& a, GroupChatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupChatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupChatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupChatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupChatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupChatResponse& from) {
    GroupChatResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupChatResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mprpc.GroupChatResponse";
  }
  protected:
  explicit GroupChatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated uint32 userId = 2;
  int userid_size() const;
  private:
  int _internal_userid_size() const;
  public:
  void clear_userid();
  private:
  uint32_t _internal_userid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_userid() const;
  void _internal_add_userid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_userid();
  public:
  uint32_t userid(int index) const;
  void set_userid(int index, uint32_t value);
  void add_userid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      userid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_userid();

  // .mprpc.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::mprpc::ResultCode& result() const;
  PROTOBUF_NODISCARD ::mprpc::ResultCode* release_result();
  ::mprpc::ResultCode* mutable_result();
  void set_allocated_result(::mprpc::ResultCode* result);
  private:
  const ::mprpc::ResultCode& _internal_result() const;
  ::mprpc::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::mprpc::ResultCode* result);
  ::mprpc::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:mprpc.GroupChatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _userid_cached_byte_size_;
    ::mprpc::ResultCode* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RPCHeader_2eproto;
};
// ===================================================================

class FriendsServiceRPC_Stub;

class FriendsServiceRPC : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendsServiceRPC() {};
 public:
  virtual ~FriendsServiceRPC();

  typedef FriendsServiceRPC_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void addFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mprpc::AddFriendsRequest* request,
                       ::mprpc::AddFriendsResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void queryAllFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mprpc::QueryAllFriendsRequest* request,
                       ::mprpc::QueryAllFriendsResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendsServiceRPC);
};

class FriendsServiceRPC_Stub : public FriendsServiceRPC {
 public:
  FriendsServiceRPC_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FriendsServiceRPC_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FriendsServiceRPC_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FriendsServiceRPC ------------------------------------------

  void addFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mprpc::AddFriendsRequest* request,
                       ::mprpc::AddFriendsResponse* response,
                       ::google::protobuf::Closure* done);
  void queryAllFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mprpc::QueryAllFriendsRequest* request,
                       ::mprpc::QueryAllFriendsResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendsServiceRPC_Stub);
};


// -------------------------------------------------------------------

class GroupsServiceRPC_Stub;

class GroupsServiceRPC : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GroupsServiceRPC() {};
 public:
  virtual ~GroupsServiceRPC();

  typedef GroupsServiceRPC_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void createGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mprpc::CreateGroupRequest* request,
                       ::mprpc::CreateGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void addGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mprpc::AddGroupRequest* request,
                       ::mprpc::AddGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void queryAllGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mprpc::QueryAllGroupsRequest* request,
                       ::mprpc::QueryAllGroupsResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void groupChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mprpc::GroupChatRequest* request,
                       ::mprpc::GroupChatResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GroupsServiceRPC);
};

class GroupsServiceRPC_Stub : public GroupsServiceRPC {
 public:
  GroupsServiceRPC_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GroupsServiceRPC_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GroupsServiceRPC_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GroupsServiceRPC ------------------------------------------

  void createGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mprpc::CreateGroupRequest* request,
                       ::mprpc::CreateGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void addGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mprpc::AddGroupRequest* request,
                       ::mprpc::AddGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void queryAllGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mprpc::QueryAllGroupsRequest* request,
                       ::mprpc::QueryAllGroupsResponse* response,
                       ::google::protobuf::Closure* done);
  void groupChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mprpc::GroupChatRequest* request,
                       ::mprpc::GroupChatResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GroupsServiceRPC_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResultCode

// int32 errCode = 1;
inline void ResultCode::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t ResultCode::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t ResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:mprpc.ResultCode.errCode)
  return _internal_errcode();
}
inline void ResultCode::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void ResultCode::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:mprpc.ResultCode.errCode)
}

// bytes errMsg = 2;
inline void ResultCode::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& ResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:mprpc.ResultCode.errMsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResultCode::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mprpc.ResultCode.errMsg)
}
inline std::string* ResultCode::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:mprpc.ResultCode.errMsg)
  return _s;
}
inline const std::string& ResultCode::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void ResultCode::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* ResultCode::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* ResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:mprpc.ResultCode.errMsg)
  return _impl_.errmsg_.Release();
}
inline void ResultCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mprpc.ResultCode.errMsg)
}

// -------------------------------------------------------------------

// FriendInfo

// uint32 userId = 1;
inline void FriendInfo::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t FriendInfo::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t FriendInfo::userid() const {
  // @@protoc_insertion_point(field_get:mprpc.FriendInfo.userId)
  return _internal_userid();
}
inline void FriendInfo::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void FriendInfo::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:mprpc.FriendInfo.userId)
}

// bytes name = 2;
inline void FriendInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FriendInfo::name() const {
  // @@protoc_insertion_point(field_get:mprpc.FriendInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mprpc.FriendInfo.name)
}
inline std::string* FriendInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mprpc.FriendInfo.name)
  return _s;
}
inline const std::string& FriendInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FriendInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendInfo::release_name() {
  // @@protoc_insertion_point(field_release:mprpc.FriendInfo.name)
  return _impl_.name_.Release();
}
inline void FriendInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mprpc.FriendInfo.name)
}

// bytes state = 3;
inline void FriendInfo::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& FriendInfo::state() const {
  // @@protoc_insertion_point(field_get:mprpc.FriendInfo.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendInfo::set_state(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mprpc.FriendInfo.state)
}
inline std::string* FriendInfo::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:mprpc.FriendInfo.state)
  return _s;
}
inline const std::string& FriendInfo::_internal_state() const {
  return _impl_.state_.Get();
}
inline void FriendInfo::_internal_set_state(const std::string& value) {
  
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendInfo::_internal_mutable_state() {
  
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendInfo::release_state() {
  // @@protoc_insertion_point(field_release:mprpc.FriendInfo.state)
  return _impl_.state_.Release();
}
inline void FriendInfo::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mprpc.FriendInfo.state)
}

// -------------------------------------------------------------------

// GroupMember

// uint32 userId = 1;
inline void GroupMember::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t GroupMember::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t GroupMember::userid() const {
  // @@protoc_insertion_point(field_get:mprpc.GroupMember.userId)
  return _internal_userid();
}
inline void GroupMember::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void GroupMember::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:mprpc.GroupMember.userId)
}

// bytes name = 2;
inline void GroupMember::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GroupMember::name() const {
  // @@protoc_insertion_point(field_get:mprpc.GroupMember.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMember::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mprpc.GroupMember.name)
}
inline std::string* GroupMember::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mprpc.GroupMember.name)
  return _s;
}
inline const std::string& GroupMember::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GroupMember::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMember::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMember::release_name() {
  // @@protoc_insertion_point(field_release:mprpc.GroupMember.name)
  return _impl_.name_.Release();
}
inline void GroupMember::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mprpc.GroupMember.name)
}

// bytes state = 3;
inline void GroupMember::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& GroupMember::state() const {
  // @@protoc_insertion_point(field_get:mprpc.GroupMember.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMember::set_state(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mprpc.GroupMember.state)
}
inline std::string* GroupMember::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:mprpc.GroupMember.state)
  return _s;
}
inline const std::string& GroupMember::_internal_state() const {
  return _impl_.state_.Get();
}
inline void GroupMember::_internal_set_state(const std::string& value) {
  
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMember::_internal_mutable_state() {
  
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMember::release_state() {
  // @@protoc_insertion_point(field_release:mprpc.GroupMember.state)
  return _impl_.state_.Release();
}
inline void GroupMember::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mprpc.GroupMember.state)
}

// bytes role = 4;
inline void GroupMember::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& GroupMember::role() const {
  // @@protoc_insertion_point(field_get:mprpc.GroupMember.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMember::set_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mprpc.GroupMember.role)
}
inline std::string* GroupMember::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:mprpc.GroupMember.role)
  return _s;
}
inline const std::string& GroupMember::_internal_role() const {
  return _impl_.role_.Get();
}
inline void GroupMember::_internal_set_role(const std::string& value) {
  
  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMember::_internal_mutable_role() {
  
  return _impl_.role_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMember::release_role() {
  // @@protoc_insertion_point(field_release:mprpc.GroupMember.role)
  return _impl_.role_.Release();
}
inline void GroupMember::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  _impl_.role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mprpc.GroupMember.role)
}

// -------------------------------------------------------------------

// GroupInfo

// uint32 groupId = 1;
inline void GroupInfo::clear_groupid() {
  _impl_.groupid_ = 0u;
}
inline uint32_t GroupInfo::_internal_groupid() const {
  return _impl_.groupid_;
}
inline uint32_t GroupInfo::groupid() const {
  // @@protoc_insertion_point(field_get:mprpc.GroupInfo.groupId)
  return _internal_groupid();
}
inline void GroupInfo::_internal_set_groupid(uint32_t value) {
  
  _impl_.groupid_ = value;
}
inline void GroupInfo::set_groupid(uint32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:mprpc.GroupInfo.groupId)
}

// bytes groupName = 2;
inline void GroupInfo::clear_groupname() {
  _impl_.groupname_.ClearToEmpty();
}
inline const std::string& GroupInfo::groupname() const {
  // @@protoc_insertion_point(field_get:mprpc.GroupInfo.groupName)
  return _internal_groupname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfo::set_groupname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupname_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mprpc.GroupInfo.groupName)
}
inline std::string* GroupInfo::mutable_groupname() {
  std::string* _s = _internal_mutable_groupname();
  // @@protoc_insertion_point(field_mutable:mprpc.GroupInfo.groupName)
  return _s;
}
inline const std::string& GroupInfo::_internal_groupname() const {
  return _impl_.groupname_.Get();
}
inline void GroupInfo::_internal_set_groupname(const std::string& value) {
  
  _impl_.groupname_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInfo::_internal_mutable_groupname() {
  
  return _impl_.groupname_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInfo::release_groupname() {
  // @@protoc_insertion_point(field_release:mprpc.GroupInfo.groupName)
  return _impl_.groupname_.Release();
}
inline void GroupInfo::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  _impl_.groupname_.SetAllocated(groupname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupname_.IsDefault()) {
    _impl_.groupname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mprpc.GroupInfo.groupName)
}

// bytes groupDesc = 3;
inline void GroupInfo::clear_groupdesc() {
  _impl_.groupdesc_.ClearToEmpty();
}
inline const std::string& GroupInfo::groupdesc() const {
  // @@protoc_insertion_point(field_get:mprpc.GroupInfo.groupDesc)
  return _internal_groupdesc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfo::set_groupdesc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupdesc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mprpc.GroupInfo.groupDesc)
}
inline std::string* GroupInfo::mutable_groupdesc() {
  std::string* _s = _internal_mutable_groupdesc();
  // @@protoc_insertion_point(field_mutable:mprpc.GroupInfo.groupDesc)
  return _s;
}
inline const std::string& GroupInfo::_internal_groupdesc() const {
  return _impl_.groupdesc_.Get();
}
inline void GroupInfo::_internal_set_groupdesc(const std::string& value) {
  
  _impl_.groupdesc_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInfo::_internal_mutable_groupdesc() {
  
  return _impl_.groupdesc_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInfo::release_groupdesc() {
  // @@protoc_insertion_point(field_release:mprpc.GroupInfo.groupDesc)
  return _impl_.groupdesc_.Release();
}
inline void GroupInfo::set_allocated_groupdesc(std::string* groupdesc) {
  if (groupdesc != nullptr) {
    
  } else {
    
  }
  _impl_.groupdesc_.SetAllocated(groupdesc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupdesc_.IsDefault()) {
    _impl_.groupdesc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mprpc.GroupInfo.groupDesc)
}

// repeated .mprpc.GroupMember member = 4;
inline int GroupInfo::_internal_member_size() const {
  return _impl_.member_.size();
}
inline int GroupInfo::member_size() const {
  return _internal_member_size();
}
inline void GroupInfo::clear_member() {
  _impl_.member_.Clear();
}
inline ::mprpc::GroupMember* GroupInfo::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:mprpc.GroupInfo.member)
  return _impl_.member_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::GroupMember >*
GroupInfo::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:mprpc.GroupInfo.member)
  return &_impl_.member_;
}
inline const ::mprpc::GroupMember& GroupInfo::_internal_member(int index) const {
  return _impl_.member_.Get(index);
}
inline const ::mprpc::GroupMember& GroupInfo::member(int index) const {
  // @@protoc_insertion_point(field_get:mprpc.GroupInfo.member)
  return _internal_member(index);
}
inline ::mprpc::GroupMember* GroupInfo::_internal_add_member() {
  return _impl_.member_.Add();
}
inline ::mprpc::GroupMember* GroupInfo::add_member() {
  ::mprpc::GroupMember* _add = _internal_add_member();
  // @@protoc_insertion_point(field_add:mprpc.GroupInfo.member)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::GroupMember >&
GroupInfo::member() const {
  // @@protoc_insertion_point(field_list:mprpc.GroupInfo.member)
  return _impl_.member_;
}

// -------------------------------------------------------------------

// AddFriendsRequest

// uint32 userId = 1;
inline void AddFriendsRequest::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t AddFriendsRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t AddFriendsRequest::userid() const {
  // @@protoc_insertion_point(field_get:mprpc.AddFriendsRequest.userId)
  return _internal_userid();
}
inline void AddFriendsRequest::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void AddFriendsRequest::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:mprpc.AddFriendsRequest.userId)
}

// uint32 friendId = 2;
inline void AddFriendsRequest::clear_friendid() {
  _impl_.friendid_ = 0u;
}
inline uint32_t AddFriendsRequest::_internal_friendid() const {
  return _impl_.friendid_;
}
inline uint32_t AddFriendsRequest::friendid() const {
  // @@protoc_insertion_point(field_get:mprpc.AddFriendsRequest.friendId)
  return _internal_friendid();
}
inline void AddFriendsRequest::_internal_set_friendid(uint32_t value) {
  
  _impl_.friendid_ = value;
}
inline void AddFriendsRequest::set_friendid(uint32_t value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:mprpc.AddFriendsRequest.friendId)
}

// -------------------------------------------------------------------

// AddFriendsResponse

// .mprpc.ResultCode result = 1;
inline bool AddFriendsResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool AddFriendsResponse::has_result() const {
  return _internal_has_result();
}
inline void AddFriendsResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::mprpc::ResultCode& AddFriendsResponse::_internal_result() const {
  const ::mprpc::ResultCode* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mprpc::ResultCode&>(
      ::mprpc::_ResultCode_default_instance_);
}
inline const ::mprpc::ResultCode& AddFriendsResponse::result() const {
  // @@protoc_insertion_point(field_get:mprpc.AddFriendsResponse.result)
  return _internal_result();
}
inline void AddFriendsResponse::unsafe_arena_set_allocated_result(
    ::mprpc::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mprpc.AddFriendsResponse.result)
}
inline ::mprpc::ResultCode* AddFriendsResponse::release_result() {
  
  ::mprpc::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mprpc::ResultCode* AddFriendsResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:mprpc.AddFriendsResponse.result)
  
  ::mprpc::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::mprpc::ResultCode* AddFriendsResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mprpc::ResultCode>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::mprpc::ResultCode* AddFriendsResponse::mutable_result() {
  ::mprpc::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:mprpc.AddFriendsResponse.result)
  return _msg;
}
inline void AddFriendsResponse::set_allocated_result(::mprpc::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:mprpc.AddFriendsResponse.result)
}

// -------------------------------------------------------------------

// QueryAllFriendsRequest

// uint32 userId = 1;
inline void QueryAllFriendsRequest::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t QueryAllFriendsRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t QueryAllFriendsRequest::userid() const {
  // @@protoc_insertion_point(field_get:mprpc.QueryAllFriendsRequest.userId)
  return _internal_userid();
}
inline void QueryAllFriendsRequest::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void QueryAllFriendsRequest::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:mprpc.QueryAllFriendsRequest.userId)
}

// -------------------------------------------------------------------

// QueryAllFriendsResponse

// .mprpc.ResultCode result = 1;
inline bool QueryAllFriendsResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool QueryAllFriendsResponse::has_result() const {
  return _internal_has_result();
}
inline void QueryAllFriendsResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::mprpc::ResultCode& QueryAllFriendsResponse::_internal_result() const {
  const ::mprpc::ResultCode* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mprpc::ResultCode&>(
      ::mprpc::_ResultCode_default_instance_);
}
inline const ::mprpc::ResultCode& QueryAllFriendsResponse::result() const {
  // @@protoc_insertion_point(field_get:mprpc.QueryAllFriendsResponse.result)
  return _internal_result();
}
inline void QueryAllFriendsResponse::unsafe_arena_set_allocated_result(
    ::mprpc::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mprpc.QueryAllFriendsResponse.result)
}
inline ::mprpc::ResultCode* QueryAllFriendsResponse::release_result() {
  
  ::mprpc::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mprpc::ResultCode* QueryAllFriendsResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:mprpc.QueryAllFriendsResponse.result)
  
  ::mprpc::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::mprpc::ResultCode* QueryAllFriendsResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mprpc::ResultCode>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::mprpc::ResultCode* QueryAllFriendsResponse::mutable_result() {
  ::mprpc::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:mprpc.QueryAllFriendsResponse.result)
  return _msg;
}
inline void QueryAllFriendsResponse::set_allocated_result(::mprpc::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:mprpc.QueryAllFriendsResponse.result)
}

// repeated .mprpc.FriendInfo friends = 2;
inline int QueryAllFriendsResponse::_internal_friends_size() const {
  return _impl_.friends_.size();
}
inline int QueryAllFriendsResponse::friends_size() const {
  return _internal_friends_size();
}
inline void QueryAllFriendsResponse::clear_friends() {
  _impl_.friends_.Clear();
}
inline ::mprpc::FriendInfo* QueryAllFriendsResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:mprpc.QueryAllFriendsResponse.friends)
  return _impl_.friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::FriendInfo >*
QueryAllFriendsResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:mprpc.QueryAllFriendsResponse.friends)
  return &_impl_.friends_;
}
inline const ::mprpc::FriendInfo& QueryAllFriendsResponse::_internal_friends(int index) const {
  return _impl_.friends_.Get(index);
}
inline const ::mprpc::FriendInfo& QueryAllFriendsResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:mprpc.QueryAllFriendsResponse.friends)
  return _internal_friends(index);
}
inline ::mprpc::FriendInfo* QueryAllFriendsResponse::_internal_add_friends() {
  return _impl_.friends_.Add();
}
inline ::mprpc::FriendInfo* QueryAllFriendsResponse::add_friends() {
  ::mprpc::FriendInfo* _add = _internal_add_friends();
  // @@protoc_insertion_point(field_add:mprpc.QueryAllFriendsResponse.friends)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::FriendInfo >&
QueryAllFriendsResponse::friends() const {
  // @@protoc_insertion_point(field_list:mprpc.QueryAllFriendsResponse.friends)
  return _impl_.friends_;
}

// -------------------------------------------------------------------

// CreateGroupRequest

// uint32 userId = 1;
inline void CreateGroupRequest::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t CreateGroupRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t CreateGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:mprpc.CreateGroupRequest.userId)
  return _internal_userid();
}
inline void CreateGroupRequest::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void CreateGroupRequest::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:mprpc.CreateGroupRequest.userId)
}

// bytes name = 2;
inline void CreateGroupRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateGroupRequest::name() const {
  // @@protoc_insertion_point(field_get:mprpc.CreateGroupRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateGroupRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mprpc.CreateGroupRequest.name)
}
inline std::string* CreateGroupRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mprpc.CreateGroupRequest.name)
  return _s;
}
inline const std::string& CreateGroupRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateGroupRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateGroupRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateGroupRequest::release_name() {
  // @@protoc_insertion_point(field_release:mprpc.CreateGroupRequest.name)
  return _impl_.name_.Release();
}
inline void CreateGroupRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mprpc.CreateGroupRequest.name)
}

// bytes desc = 3;
inline void CreateGroupRequest::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& CreateGroupRequest::desc() const {
  // @@protoc_insertion_point(field_get:mprpc.CreateGroupRequest.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateGroupRequest::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mprpc.CreateGroupRequest.desc)
}
inline std::string* CreateGroupRequest::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:mprpc.CreateGroupRequest.desc)
  return _s;
}
inline const std::string& CreateGroupRequest::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void CreateGroupRequest::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateGroupRequest::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateGroupRequest::release_desc() {
  // @@protoc_insertion_point(field_release:mprpc.CreateGroupRequest.desc)
  return _impl_.desc_.Release();
}
inline void CreateGroupRequest::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mprpc.CreateGroupRequest.desc)
}

// -------------------------------------------------------------------

// CreateGroupResponse

// .mprpc.ResultCode result = 1;
inline bool CreateGroupResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool CreateGroupResponse::has_result() const {
  return _internal_has_result();
}
inline void CreateGroupResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::mprpc::ResultCode& CreateGroupResponse::_internal_result() const {
  const ::mprpc::ResultCode* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mprpc::ResultCode&>(
      ::mprpc::_ResultCode_default_instance_);
}
inline const ::mprpc::ResultCode& CreateGroupResponse::result() const {
  // @@protoc_insertion_point(field_get:mprpc.CreateGroupResponse.result)
  return _internal_result();
}
inline void CreateGroupResponse::unsafe_arena_set_allocated_result(
    ::mprpc::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mprpc.CreateGroupResponse.result)
}
inline ::mprpc::ResultCode* CreateGroupResponse::release_result() {
  
  ::mprpc::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mprpc::ResultCode* CreateGroupResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:mprpc.CreateGroupResponse.result)
  
  ::mprpc::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::mprpc::ResultCode* CreateGroupResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mprpc::ResultCode>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::mprpc::ResultCode* CreateGroupResponse::mutable_result() {
  ::mprpc::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:mprpc.CreateGroupResponse.result)
  return _msg;
}
inline void CreateGroupResponse::set_allocated_result(::mprpc::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:mprpc.CreateGroupResponse.result)
}

// -------------------------------------------------------------------

// AddGroupRequest

// uint32 userId = 1;
inline void AddGroupRequest::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t AddGroupRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t AddGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:mprpc.AddGroupRequest.userId)
  return _internal_userid();
}
inline void AddGroupRequest::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void AddGroupRequest::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:mprpc.AddGroupRequest.userId)
}

// uint32 groupId = 2;
inline void AddGroupRequest::clear_groupid() {
  _impl_.groupid_ = 0u;
}
inline uint32_t AddGroupRequest::_internal_groupid() const {
  return _impl_.groupid_;
}
inline uint32_t AddGroupRequest::groupid() const {
  // @@protoc_insertion_point(field_get:mprpc.AddGroupRequest.groupId)
  return _internal_groupid();
}
inline void AddGroupRequest::_internal_set_groupid(uint32_t value) {
  
  _impl_.groupid_ = value;
}
inline void AddGroupRequest::set_groupid(uint32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:mprpc.AddGroupRequest.groupId)
}

// -------------------------------------------------------------------

// AddGroupResponse

// .mprpc.ResultCode result = 1;
inline bool AddGroupResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool AddGroupResponse::has_result() const {
  return _internal_has_result();
}
inline void AddGroupResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::mprpc::ResultCode& AddGroupResponse::_internal_result() const {
  const ::mprpc::ResultCode* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mprpc::ResultCode&>(
      ::mprpc::_ResultCode_default_instance_);
}
inline const ::mprpc::ResultCode& AddGroupResponse::result() const {
  // @@protoc_insertion_point(field_get:mprpc.AddGroupResponse.result)
  return _internal_result();
}
inline void AddGroupResponse::unsafe_arena_set_allocated_result(
    ::mprpc::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mprpc.AddGroupResponse.result)
}
inline ::mprpc::ResultCode* AddGroupResponse::release_result() {
  
  ::mprpc::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mprpc::ResultCode* AddGroupResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:mprpc.AddGroupResponse.result)
  
  ::mprpc::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::mprpc::ResultCode* AddGroupResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mprpc::ResultCode>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::mprpc::ResultCode* AddGroupResponse::mutable_result() {
  ::mprpc::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:mprpc.AddGroupResponse.result)
  return _msg;
}
inline void AddGroupResponse::set_allocated_result(::mprpc::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:mprpc.AddGroupResponse.result)
}

// -------------------------------------------------------------------

// QueryAllGroupsRequest

// uint32 userId = 1;
inline void QueryAllGroupsRequest::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t QueryAllGroupsRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t QueryAllGroupsRequest::userid() const {
  // @@protoc_insertion_point(field_get:mprpc.QueryAllGroupsRequest.userId)
  return _internal_userid();
}
inline void QueryAllGroupsRequest::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void QueryAllGroupsRequest::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:mprpc.QueryAllGroupsRequest.userId)
}

// -------------------------------------------------------------------

// QueryAllGroupsResponse

// .mprpc.ResultCode result = 1;
inline bool QueryAllGroupsResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool QueryAllGroupsResponse::has_result() const {
  return _internal_has_result();
}
inline void QueryAllGroupsResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::mprpc::ResultCode& QueryAllGroupsResponse::_internal_result() const {
  const ::mprpc::ResultCode* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mprpc::ResultCode&>(
      ::mprpc::_ResultCode_default_instance_);
}
inline const ::mprpc::ResultCode& QueryAllGroupsResponse::result() const {
  // @@protoc_insertion_point(field_get:mprpc.QueryAllGroupsResponse.result)
  return _internal_result();
}
inline void QueryAllGroupsResponse::unsafe_arena_set_allocated_result(
    ::mprpc::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mprpc.QueryAllGroupsResponse.result)
}
inline ::mprpc::ResultCode* QueryAllGroupsResponse::release_result() {
  
  ::mprpc::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mprpc::ResultCode* QueryAllGroupsResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:mprpc.QueryAllGroupsResponse.result)
  
  ::mprpc::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::mprpc::ResultCode* QueryAllGroupsResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mprpc::ResultCode>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::mprpc::ResultCode* QueryAllGroupsResponse::mutable_result() {
  ::mprpc::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:mprpc.QueryAllGroupsResponse.result)
  return _msg;
}
inline void QueryAllGroupsResponse::set_allocated_result(::mprpc::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:mprpc.QueryAllGroupsResponse.result)
}

// repeated .mprpc.GroupInfo groups = 2;
inline int QueryAllGroupsResponse::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int QueryAllGroupsResponse::groups_size() const {
  return _internal_groups_size();
}
inline void QueryAllGroupsResponse::clear_groups() {
  _impl_.groups_.Clear();
}
inline ::mprpc::GroupInfo* QueryAllGroupsResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:mprpc.QueryAllGroupsResponse.groups)
  return _impl_.groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::GroupInfo >*
QueryAllGroupsResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:mprpc.QueryAllGroupsResponse.groups)
  return &_impl_.groups_;
}
inline const ::mprpc::GroupInfo& QueryAllGroupsResponse::_internal_groups(int index) const {
  return _impl_.groups_.Get(index);
}
inline const ::mprpc::GroupInfo& QueryAllGroupsResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:mprpc.QueryAllGroupsResponse.groups)
  return _internal_groups(index);
}
inline ::mprpc::GroupInfo* QueryAllGroupsResponse::_internal_add_groups() {
  return _impl_.groups_.Add();
}
inline ::mprpc::GroupInfo* QueryAllGroupsResponse::add_groups() {
  ::mprpc::GroupInfo* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:mprpc.QueryAllGroupsResponse.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mprpc::GroupInfo >&
QueryAllGroupsResponse::groups() const {
  // @@protoc_insertion_point(field_list:mprpc.QueryAllGroupsResponse.groups)
  return _impl_.groups_;
}

// -------------------------------------------------------------------

// GroupChatRequest

// uint32 userId = 1;
inline void GroupChatRequest::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t GroupChatRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t GroupChatRequest::userid() const {
  // @@protoc_insertion_point(field_get:mprpc.GroupChatRequest.userId)
  return _internal_userid();
}
inline void GroupChatRequest::_internal_set_userid(uint32_t value) {
  
  _impl_.userid_ = value;
}
inline void GroupChatRequest::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:mprpc.GroupChatRequest.userId)
}

// uint32 groupId = 2;
inline void GroupChatRequest::clear_groupid() {
  _impl_.groupid_ = 0u;
}
inline uint32_t GroupChatRequest::_internal_groupid() const {
  return _impl_.groupid_;
}
inline uint32_t GroupChatRequest::groupid() const {
  // @@protoc_insertion_point(field_get:mprpc.GroupChatRequest.groupId)
  return _internal_groupid();
}
inline void GroupChatRequest::_internal_set_groupid(uint32_t value) {
  
  _impl_.groupid_ = value;
}
inline void GroupChatRequest::set_groupid(uint32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:mprpc.GroupChatRequest.groupId)
}

// -------------------------------------------------------------------

// GroupChatResponse

// .mprpc.ResultCode result = 1;
inline bool GroupChatResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool GroupChatResponse::has_result() const {
  return _internal_has_result();
}
inline void GroupChatResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::mprpc::ResultCode& GroupChatResponse::_internal_result() const {
  const ::mprpc::ResultCode* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mprpc::ResultCode&>(
      ::mprpc::_ResultCode_default_instance_);
}
inline const ::mprpc::ResultCode& GroupChatResponse::result() const {
  // @@protoc_insertion_point(field_get:mprpc.GroupChatResponse.result)
  return _internal_result();
}
inline void GroupChatResponse::unsafe_arena_set_allocated_result(
    ::mprpc::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mprpc.GroupChatResponse.result)
}
inline ::mprpc::ResultCode* GroupChatResponse::release_result() {
  
  ::mprpc::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mprpc::ResultCode* GroupChatResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:mprpc.GroupChatResponse.result)
  
  ::mprpc::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::mprpc::ResultCode* GroupChatResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mprpc::ResultCode>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::mprpc::ResultCode* GroupChatResponse::mutable_result() {
  ::mprpc::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:mprpc.GroupChatResponse.result)
  return _msg;
}
inline void GroupChatResponse::set_allocated_result(::mprpc::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:mprpc.GroupChatResponse.result)
}

// repeated uint32 userId = 2;
inline int GroupChatResponse::_internal_userid_size() const {
  return _impl_.userid_.size();
}
inline int GroupChatResponse::userid_size() const {
  return _internal_userid_size();
}
inline void GroupChatResponse::clear_userid() {
  _impl_.userid_.Clear();
}
inline uint32_t GroupChatResponse::_internal_userid(int index) const {
  return _impl_.userid_.Get(index);
}
inline uint32_t GroupChatResponse::userid(int index) const {
  // @@protoc_insertion_point(field_get:mprpc.GroupChatResponse.userId)
  return _internal_userid(index);
}
inline void GroupChatResponse::set_userid(int index, uint32_t value) {
  _impl_.userid_.Set(index, value);
  // @@protoc_insertion_point(field_set:mprpc.GroupChatResponse.userId)
}
inline void GroupChatResponse::_internal_add_userid(uint32_t value) {
  _impl_.userid_.Add(value);
}
inline void GroupChatResponse::add_userid(uint32_t value) {
  _internal_add_userid(value);
  // @@protoc_insertion_point(field_add:mprpc.GroupChatResponse.userId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupChatResponse::_internal_userid() const {
  return _impl_.userid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupChatResponse::userid() const {
  // @@protoc_insertion_point(field_list:mprpc.GroupChatResponse.userId)
  return _internal_userid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupChatResponse::_internal_mutable_userid() {
  return &_impl_.userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupChatResponse::mutable_userid() {
  // @@protoc_insertion_point(field_mutable_list:mprpc.GroupChatResponse.userId)
  return _internal_mutable_userid();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mprpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RPCHeader_2eproto
